{"ast":null,"code":"var _jsxFileName = \"/media/devdeadviz/1AAA83FAAA83D125/Projects/evernote-clone/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useEffect } from \"react\";\nimport firebase from \"./firebase/firebase\";\nimport SideBar from \"./sideBar/SideBar\";\nimport Editor from \"./editor/Editor\";\nimport { timestamp } from \"./firebase/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [selectedNoteIndex, setSelectedNoteIndex] = useState(null);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [notes, setNotes] = useState([]);\n  const [addingNote, setAddingNote] = useState(false);\n  const [title, setTitle] = useState(null);\n  const [text, setText] = useState(null);\n  const [id, setId] = useState(null); // n -> note, i -> index\n\n  const selectNote = (n, i) => {\n    setSelectedNote(n);\n    setSelectedNoteIndex(i);\n  }; // e -> note\n\n\n  const deleteNote = async e => {\n    if (window.confirm(`Are you sure you want to delete: ${e.title}`)) {\n      const noteIndex = notes.indexOf(e);\n      await setNotes(notes.filter(_note => _note !== e));\n\n      if (selectedNoteIndex === noteIndex) {\n        setSelectedNoteIndex(null);\n        setSelectedNote(null);\n      } else {\n        notes.length > 1 ? selectNote(notes[selectedNoteIndex - 1], selectedNoteIndex - 1) : setSelectedNoteIndex(null);\n        setSelectedNote(null);\n      }\n\n      firebase.firestore().collection(\"notes\").doc(e.id).delete();\n    }\n  };\n\n  const newNote = async title => {\n    const note = {\n      title: title,\n      body: \"\"\n    };\n    const newFromDB = await firebase.firestore().collection(\"notes\").add({\n      title: note.title,\n      body: note.body,\n      timestamp: timestamp\n    });\n    const newID = newFromDB.id;\n    await setNotes([...notes, note]);\n    const newNoteIndex = notes.indexOf(notes.filter(_note => _note.id === newID[0]));\n    console.log(\"index\", notes[newNoteIndex]);\n    setSelectedNote(notes[newNoteIndex]);\n    setSelectedNoteIndex(newNoteIndex);\n    setTitle(null);\n    setAddingNote(false);\n  };\n\n  const noteUpdate = (id, noteObj) => {\n    if (id) {\n      firebase.firestore().collection(\"notes\").doc(id).update({\n        title: noteObj.title,\n        body: noteObj.body,\n        timestamp: timestamp\n      });\n    }\n  };\n\n  useEffect(() => {\n    firebase.firestore().collection(\"notes\").onSnapshot(serverUpdate => {\n      const notes = serverUpdate.docs.map(_doc => {\n        const data = _doc.data();\n\n        data[\"id\"] = _doc.id;\n        return data;\n      });\n      setNotes(notes);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SideBar, {\n      notes: notes,\n      selectedNoteIndex: selectedNoteIndex,\n      selectNote: selectNote,\n      deleteNote: deleteNote,\n      newNote: newNote,\n      addingNote: addingNote,\n      setAddingNote: setAddingNote,\n      title: title,\n      setTitle: setTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), selectedNote && /*#__PURE__*/_jsxDEV(Editor, {\n      notes: notes,\n      setNotes: setNotes,\n      selectedNote: selectedNote,\n      setSelectedNote: setSelectedNote,\n      selectedNoteIndex: selectedNoteIndex,\n      setSelectedNoteIndex: setSelectedNoteIndex,\n      title: title,\n      setTitle: setTitle,\n      noteUpdate: noteUpdate,\n      id: id,\n      setId: setId,\n      text: text,\n      setText: setText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"plVYEhcCdBlNJoToWx3RYKJN+NQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/media/devdeadviz/1AAA83FAAA83D125/Projects/evernote-clone/src/App.js"],"names":["React","useEffect","firebase","SideBar","Editor","timestamp","App","selectedNoteIndex","setSelectedNoteIndex","useState","selectedNote","setSelectedNote","notes","setNotes","addingNote","setAddingNote","title","setTitle","text","setText","id","setId","selectNote","n","i","deleteNote","e","window","confirm","noteIndex","indexOf","filter","_note","length","firestore","collection","doc","delete","newNote","note","body","newFromDB","add","newID","newNoteIndex","console","log","noteUpdate","noteObj","update","onSnapshot","serverUpdate","docs","map","_doc","data"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport React, { useEffect } from \"react\";\nimport firebase from \"./firebase/firebase\";\nimport SideBar from \"./sideBar/SideBar\";\nimport Editor from \"./editor/Editor\";\nimport { timestamp } from \"./firebase/firebase\";\n\nconst App = () => {\n  const [selectedNoteIndex, setSelectedNoteIndex] = useState(null);\n  const [selectedNote, setSelectedNote] = useState(null);\n  const [notes, setNotes] = useState([]);\n  const [addingNote, setAddingNote] = useState(false);\n  const [title, setTitle] = useState(null);\n  const [text, setText] = useState(null);\n  const [id, setId] = useState(null);\n\n  // n -> note, i -> index\n  const selectNote = (n, i) => {\n    setSelectedNote(n);\n    setSelectedNoteIndex(i);\n  };\n\n  // e -> note\n  const deleteNote = async (e) => {\n    if (window.confirm(`Are you sure you want to delete: ${e.title}`)) {\n      const noteIndex = notes.indexOf(e);\n      await setNotes(notes.filter((_note) => _note !== e));\n      if (selectedNoteIndex === noteIndex) {\n        setSelectedNoteIndex(null);\n        setSelectedNote(null);\n      } else {\n        notes.length > 1\n          ? selectNote(notes[selectedNoteIndex - 1], selectedNoteIndex - 1)\n          : setSelectedNoteIndex(null);\n        setSelectedNote(null);\n      }\n      firebase.firestore().collection(\"notes\").doc(e.id).delete();\n    }\n  };\n\n  const newNote = async (title) => {\n    const note = {\n      title: title,\n      body: \"\",\n    };\n    const newFromDB = await firebase.firestore().collection(\"notes\").add({\n      title: note.title,\n      body: note.body,\n      timestamp: timestamp,\n    });\n    const newID = newFromDB.id;\n    await setNotes([...notes, note]);\n    const newNoteIndex = notes.indexOf(\n      notes.filter((_note) => _note.id === newID[0])\n    );\n    console.log(\"index\", notes[newNoteIndex]);\n    setSelectedNote(notes[newNoteIndex]);\n    setSelectedNoteIndex(newNoteIndex);\n    setTitle(null);\n    setAddingNote(false);\n  };\n\n  const noteUpdate = (id, noteObj) => {\n    if (id) {\n      firebase.firestore().collection(\"notes\").doc(id).update({\n        title: noteObj.title,\n        body: noteObj.body,\n        timestamp: timestamp,\n      });\n    }\n  };\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"notes\")\n      .onSnapshot((serverUpdate) => {\n        const notes = serverUpdate.docs.map((_doc) => {\n          const data = _doc.data();\n          data[\"id\"] = _doc.id;\n          return data;\n        });\n        setNotes(notes);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <SideBar\n        notes={notes}\n        selectedNoteIndex={selectedNoteIndex}\n        selectNote={selectNote}\n        deleteNote={deleteNote}\n        newNote={newNote}\n        addingNote={addingNote}\n        setAddingNote={setAddingNote}\n        title={title}\n        setTitle={setTitle}\n      />\n      {selectedNote && (\n        <Editor\n          notes={notes}\n          setNotes={setNotes}\n          selectedNote={selectedNote}\n          setSelectedNote={setSelectedNote}\n          selectedNoteIndex={selectedNoteIndex}\n          setSelectedNoteIndex={setSelectedNoteIndex}\n          title={title}\n          setTitle={setTitle}\n          noteUpdate={noteUpdate}\n          id={id}\n          setId={setId}\n          text={text}\n          setText={setText}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}